// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mission.Entities.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mission.Entities.Migrations
{
    [DbContext(typeof(MissionDbContext))]
    [Migration("20250610062549_createnewMissionApplicationEntity")]
    partial class createnewMissionApplicationEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mission.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Ahmedabad",
                            CountryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Rajkot",
                            CountryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Surat",
                            CountryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Jamnagar",
                            CountryId = 1
                        },
                        new
                        {
                            Id = 5,
                            CityName = "New York",
                            CountryId = 2
                        },
                        new
                        {
                            Id = 6,
                            CityName = "California",
                            CountryId = 2
                        },
                        new
                        {
                            Id = 7,
                            CityName = "Texas",
                            CountryId = 2
                        },
                        new
                        {
                            Id = 8,
                            CityName = "London",
                            CountryId = 3
                        },
                        new
                        {
                            Id = 9,
                            CityName = "Manchester",
                            CountryId = 3
                        },
                        new
                        {
                            Id = 10,
                            CityName = "Birmingham",
                            CountryId = 3
                        },
                        new
                        {
                            Id = 11,
                            CityName = "Moscow",
                            CountryId = 4
                        },
                        new
                        {
                            Id = 12,
                            CityName = "Saint Petersburg",
                            CountryId = 4
                        },
                        new
                        {
                            Id = 13,
                            CityName = "Yekaterinburg",
                            CountryId = 4
                        });
                });

            modelBuilder.Entity("Mission.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "India"
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "USA"
                        },
                        new
                        {
                            Id = 3,
                            CountryName = "UK"
                        },
                        new
                        {
                            Id = 4,
                            CountryName = "Russia"
                        });
                });

            modelBuilder.Entity("Mission.Entities.Entities.MissionApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MissionId")
                        .HasColumnType("integer");

                    b.Property<int>("MissionsId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MissionsId");

                    b.HasIndex("UserId");

                    b.ToTable("MissionApplications");
                });

            modelBuilder.Entity("Mission.Entities.Entities.MissionTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MissionThemes");
                });

            modelBuilder.Entity("Mission.Entities.MissionSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MissionSkill");
                });

            modelBuilder.Entity("Mission.Entities.Missions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MissionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MissionImages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MissionSkillId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MissionThemeId")
                        .HasColumnType("integer");

                    b.Property<string>("MissionTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RegistrationDeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TotalSheets")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("MissionThemeId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Mission.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("UserImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_image");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmailAddress = "admin@tatvasoft.com",
                            FirstName = "Tatva",
                            IsDeleted = false,
                            LastName = "Admin",
                            Password = "admin",
                            PhoneNumber = "9876543210",
                            UserImage = "",
                            UserType = "admin"
                        });
                });

            modelBuilder.Entity("Mission.Entities.Entities.MissionApplication", b =>
                {
                    b.HasOne("Mission.Entities.Missions", "Missions")
                        .WithMany("MissionApplications")
                        .HasForeignKey("MissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mission.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Missions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mission.Entities.Missions", b =>
                {
                    b.HasOne("Mission.Entities.City", "City")
                        .WithMany("Missions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mission.Entities.Country", "Country")
                        .WithMany("Missions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mission.Entities.Entities.MissionTheme", "MissionTheme")
                        .WithMany()
                        .HasForeignKey("MissionThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("MissionTheme");
                });

            modelBuilder.Entity("Mission.Entities.City", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("Mission.Entities.Country", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("Mission.Entities.Missions", b =>
                {
                    b.Navigation("MissionApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
